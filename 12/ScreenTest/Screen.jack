// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
	static Array storage;
	static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
		let color = true;
		let storage = Array.new(16);
		let storage[0] = 1;
		let storage[1] = 2;
		let storage[2] = 4;
		let storage[3] = 8;
		let storage[4] = 16;
		let storage[5] = 32;
		let storage[6] = 64;
		let storage[7] = 128;
		let storage[8] = 256;
		let storage[9] = 512;
		let storage[10] = 1024;
		let storage[11] = 2048;
		let storage[12] = 4096;
		let storage[13] = 8192;
		let storage[14] = 16384;
		let storage[15] = 16384 + 16384; // cannot represent 32768 as a single value, it is too large
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
		let i = 0;
		while(i<8192) // size of screen is 8192, (256*512)/16
		{
			let screen[i] = 0;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, bit, mask;
		let address = (x/16) + (y*32);
		let bit = x - ((x/16)*16); // bit = col%16
		// keep all other pixels in the address the same, but set bit at location 'bit' to color;
		let mask = twoToThe[bit];
		if(color)
		{
			let screen[address] = screen[address] | mask; // black pixel
		}
		else
		{
			let screen[address] = screen[address] & ~mask; // white pixel
		}
		
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, temp;
		var int adyMinusbdx;
		var int bdxMinusady;
		let a = 0;
		let b = 0;
		if((x1>x2) & (y1>y2))
		{
			let temp = x1;
			let x1 = x2;
			let x2=temp;
			let temp=y1;
			let y1=y2;
			let y2=y1;
		}
		if((y1>y2) & (x1<x2))
		{
			let temp = x1;
			let x1 = x2;
			let x2=temp;
			let temp=y1;
			let y1=y2;
			let y2=y1;
		}
		let dx = x2-x1;
		let dy = y2-y1;
		if(dx = 0) // draw vertical line from y1 to y2
		{
			do Screen.drawPixel(x1, y1);
			while(~(b=dy))
			{
				if(dy<0)
				{
					let b=b-1;
				}
				else
				{
					let b = b+1;
				}
				do Screen.drawPixel(x1,y1+b);
			}
		}
		if(dy = 0) // draw horizontal line from x1 to x2
		{
			do Screen.drawPixel(x1, y1);
			while(~(a=dx))
			{
				if(dx<0)
				{
					let a = a-1;
				}
				else
				{
					let a = a+1;
				}
				do Screen.drawPixel(x1+a,y1);
			}
		}
		if((dx>0) & (dy>0))
		{
			let adyMinusbdx=0;
			while(~(a>dx) & ~(b>dy))
			{
				do Screen.drawPixel(x1+a, y1+b);
				if(adyMinusbdx < 0)
				{
					let a = a+1;
					let adyMinusbdx = adyMinusbdx+dy;
				}
				else
				{
					let b = b+1;
					let adyMinusbdx = adyMinusbdx-dx;
				}
			}
		}
		if((dx<0)&(dy>0))
		{
			let bdxMinusady=0; 
			while(~(a<dx) & ~(b>dy))
			{
				do Screen.drawPixel(x1+a, y1+b);
				if(bdxMinusady > 0)
				{
					let a = a-1;
					let bdxMinusady = bdxMinusady-dy;
				}
				else
				{
					let b = b+1;
					let bdxMinusady = bdxMinusady+dx;
				}
			}
		}
		return;
		
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy;
		let dy = y1;
		do Screen.drawLine(x1, dy, x2, dy);
		while(~(dy=y2))
		{
			let dy = dy+1;
			do Screen.drawLine(x1, dy, x2, dy);
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int a, b;
		var int r_squared;
		let b = -r;
		let r_squared = r * r;
		while(~(dy>r))
		{
			let a = Math.sqrt(r_squared - (b * b));
			do Screen.drawLine(x - a, y + b, x + a , y + b);
			let b = b + 1;
		}
		return;
    }
}
